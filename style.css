@import "animate.css";
/* animation library */
@import url('https://fonts.googleapis.com/css2?family=Syncopate:wght@700&display=swap');
/* import syncopate font */


/* these two classes are inserted into the classlist of the body depending on wether the javascript has determined if the user is in dark mode or not. */
.darkMode {
    --colMainBg: #341403;
    /* the colour used as the background for the website. */
    --colMainFg: #FCDBB2;
    /* the colour used as the foreground (main text, buttons etc.) */
    --colTer: #647940;
    /* secondary colour */
    --colSec: #98bb85;
    /* tertiary colour */
    --colMid: #9C795C;
    /* midpoint between BG and FG colours.*/
    /* i have set all of the websites colours as CSS variabes to make it easier than going through every instance that uses that colour and changing it to the correct one.*/
}

.lightMode {
    --colMainFg: #341403;
    /* the colour used as the foreground (main text, buttons etc.) */
    --colMainBg: #FCDBB2;
    /* the colour used as the background for the website. */
    --colTer: #647940;
    /* secondary colour */
    --colSec: #98bb85;
    /* tertiary colour */
    --colMid: #9C795C;
    /* midpoint between BG and FG colours.*/
    /* i have set all of the websites colours as CSS variabes to make it easier than going through every instance that uses that colour and changing it to the correct one.*/
}

/* this is a global body tag. you'll see later there is also a body tag in the media query bits that controlls scrolling */
body {
    margin: 0%;
    /* this applies a margin of 0 to all of the body. this means that there wont be any stupid white border around the page. */

    background-color: var(--colMainBg);
    /* set the background to the variable */
}

/* this class is for the border you see around every element */
.border {
    background-color: var(--colMainBg);
    border-style: solid;
    border-color: var(--colMid);
    border-width: 3px;
    margin: 3px;
    padding: 3px;
    z-index: 1;
}

/* this class is for the 'est.' text under the title*/
.subtext {
    color: var(--colMainFg);
    font-family: Syncopate;
    margin: 0%;
    text-align: center;
}

/* this class is for the paragraphs. */
.text {
    color: var(--colMainFg);
    font-family: Arial, Helvetica, sans-serif;
    margin: 0%;
    text-align: justify;
    font-size: larger;
    padding: 5px;
}

.text-center {
    text-align: center;
}

a:link {
    text-decoration: none;
    color: var(--colMainFg);
}

a:visited {
    text-decoration: none;
    color: var(--colMainFg);
}

a:hover {
    color: var(--colMainBg);
    background-color: var(--colMainFg);
}

a:active {
    text-decoration: none;
    color: var(--colMainFg);
}

/* these following two media queries are for the title text, one for when the screen width is larger than 500px and one that is smaller.
reason being when the screen is smaller than around 500px the title takes up way too much space and so I just decidied to shrink it when it gets to that point.*/

/* when screen is bigger than 500: */
@media only screen and (min-width: 500px) {
    h1 {
        color: var(--colMainFg);
        font-family: Syncopate;
        margin: 0%;
        text-align: center;
        font-size: 75px;
    }
}

/* when screen is smaller than 500: */
@media only screen and (max-width: 500px) {
    h1 {
        color: var(--colMainFg);
        font-family: Syncopate;
        margin: 0%;
        text-align: center;
        font-size: 40px;
    }
}

/* here are the two massive media queries that encompass most of the css. most of the previous stuff was for things that apply to both scenarios,
but now we're onto things that must change between the two. the query being: if the screen size is bigger or smaller than 768px. this is the width of the content
when the left and right whitespace of the website would otherwise be zero. this is just slightly bigger than most phone screens, and so is quite a good denominator
roughly of wether we're in a mobile setting or not. */

/* when screen is bigger than 768: */
@media only screen and (min-width: 768px) {

    /* i set the height of the body to be 100% of the view hight. this makes sure that it won't accidentally be any taller and allow the user to scroll the whole page.*/
    body {
        height: 100vh;
    }

    /* here is the css grid container class. this outlines things like how much whitespace there should be, and the layout of all the elements in the site. */
    .container {
        display: grid;
        grid-template-columns: 1fr 256px 256px 256px 1fr;
        grid-template-rows: min-content min-content 1.6fr 1.6fr;
        grid-auto-columns: 1fr;
        gap: 0px 0px;
        grid-auto-flow: row;
        grid-template-areas:
            "Whitespace-L Header Header Header Whitespace-R"
            "Whitespace-L Navbar Navbar Navbar Whitespace-R"
            "Whitespace-L Textbox-1 Textbox-2 Textbox-2 Whitespace-R"
            "Whitespace-L Textbox-1 Textbox-3 Textbox-3 Whitespace-R";
        height: 100%;
    }

    .historycontainer {
        display: grid;
        grid-template-columns: 1fr 768px 1fr;
        grid-template-rows: min-content min-content 1.6fr;
        grid-auto-columns: 1fr;
        gap: 0px 0px;
        grid-auto-flow: row;
        grid-template-areas:
            "Whitespace-L Header Whitespace-R"
            "Whitespace-L Navbar Whitespace-R"
            "Whitespace-L Textbox-Full Whitespace-R";
        height: 100%;
    }

    /* here i assign each grid identifier to its own class: */
    .Header {
        grid-area: Header;
    }

    .Navbar {
        grid-area: Navbar;
    }

    .Textbox-1 {
        grid-area: Textbox-1;
        overflow: auto;
    }

    .Textbox-2 {
        grid-area: Textbox-2;
        overflow: auto;
    }

    .Textbox-3 {
        grid-area: Textbox-3;
        overflow: auto;
    }

    .Textbox-Full {
        grid-area: Textbox-Full;
        overflow: auto;
    }

    .Whitespace-L {
        grid-area: Whitespace-L;
    }

    .Whitespace-R {
        grid-area: Whitespace-R;
    }

    /* this is the class for the navbar. */
    .navtext {
        font-family: syncopate;
        color: var(--colMainFg);
        text-align: center;
        font-size: 30px;
        margin: 0px;
    }

    /* i have a button at the bottom right corner of the screen that uses some javascript to change the light/dark mode of the site. this makes it snap always to the
    bottom right, and tells the cursor to change to the pointing finger so you know you are able to click it.*/
    .themeButton {
        background-color: var(--colMainFg);
        position: absolute;
        height: 50px;
        width: 50px;
        margin: 5px;
        bottom: 0;
        right: 0;
        cursor: pointer;
        border-radius: 5px;
        z-index: 2;
    }

    /* this is for the text in the theme button. */
    .themeText {
        color: var(--colMainBg);
        text-align: center;
        line-height: 50px;
        font-size: 35px;
        margin: 0px;
        font-weight: bolder;
    }

    .paragraphImage {
        padding: 5px;
        float: right;
        width: 50%;
        border-radius: 10px;
    }

    .sideImage {
        width: 100%;
        border-radius: 10px;
    }
}

/* when screen is smaller than 768: */
@media only screen and (max-width: 768px) {

    /* this auto tag sets the height of whatever the website would be if the text continued and didnt overflow and scroll around in the borders. i made this
    decision as it makes much more sense in a mobile setting.*/
    body {
        height: auto;
    }

    .container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: min-content min-content;
        grid-auto-columns: 1fr;
        gap: 0px 0px;
        grid-auto-flow: row;
        grid-template-areas:
            "Header Header Header"
            "Navbar Navbar Navbar"
            "Textbox-1 Textbox-2 Textbox-3"
            "Textbox-1 Textbox-2 Textbox-3";
    }

    .Header {
        grid-area: Header;
    }

    .Navbar {
        grid-area: Navbar;
    }

    .Textbox-1 {
        grid-area: Textbox-1;
    }

    .Textbox-2 {
        grid-area: Textbox-2;
    }

    .Textbox-3 {
        grid-area: Textbox-3;
    }

    .navtext {
        font-family: syncopate;
        color: var(--colMainFg);
        text-align: center;
        font-size: 40px;
        margin: 0px;
    }

    /* instead of the theme button 'floating' to the bottom right of the screen, and overlaying the content if needed, it instead snaps to the very bottom
    of the content, underneath everything else instead of on top. this is better for the mobile mode as the button could get in the way of text and hinder
    readability quickly. */
    .themeButton {
        background-color: var(--colMainFg);
        position: relative;
        height: 50px;
        width: 50px;
        margin: 5px;
        margin-left: auto;
        cursor: pointer;
        border-radius: 5px;
        z-index: 2;
    }

    /* this is for the text in the theme button. */
    .themeText {
        color: var(--colMainBg);
        text-align: center;
        line-height: 50px;
        font-size: 35px;
        margin: 0px;
        font-weight: bolder;
    }
}

.noselect {
    -webkit-touch-callout: none;
    /* iOS Safari */
    -webkit-user-select: none;
    /* Safari */
    -khtml-user-select: none;
    /* Konqueror HTML */
    -moz-user-select: none;
    /* Old versions of Firefox */
    -ms-user-select: none;
    /* Internet Explorer/Edge */
    user-select: none;
    /* Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox */
}